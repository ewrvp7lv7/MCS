function getFullName(first, last) {
    return `${first} ${last}`
}

Number.parseInt("123abc", 10) // 123
Number.parseInt("4 —Å—ã—Ä–∞", 10) // 4

console.log(kampai)

//NaN (–∞–Ω–≥–ª. Not-a-Number, ¬´–Ω–µ —á–∏—Å–ª–æ¬ª)  =undefined + 1
// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã ‚Äî —ç—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ, –Ω–∞—Ö–æ–¥—è—â–∏–µ—Å—è –≤–Ω—É—Ç—Ä–∏ –∫—Ä—É–≥–ª—ã—Ö —Å–∫–æ–±–æ–∫
// –ê—Ä–≥—É–º–µ–Ω—Ç—ã ‚Äî —ç—Ç–æ –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–¥–∞—é—Ç—Å—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º –∫–∞–∫ –∑–Ω–∞—á–µ–Ω–∏—è
// –ü—Ä–∏ –≤—ã–∑–æ–≤–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –¥–∂–∞–≤–∞—Å–∫–∏–ø—Ç–æ–º –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Å—Ç–∞–≤–ª–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ undefined
function addOne(number = 0) {
    return number + 1
}

// –∑–∞–ø–∏—Å–∏ (records) ‚Äî –Ω–µ–∏–∑–º–µ–Ω—è–µ–º–∞—è –∏ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º–∞—è –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é –≤–µ—Ä—Å–∏—è –ø—Ä–æ—Å—Ç—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤;
// –∫–æ—Ä—Ç–µ–∂–∏ (tuples) ‚Äî –Ω–µ–∏–∑–º–µ–Ω—è–µ–º–∞—è –∏ —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º–∞—è –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é –≤–µ—Ä—Å–∏—è –º–∞—Å—Å–∏–≤–æ–≤.


punks.forEach(function (punk) {
    // –î–µ–π—Å—Ç–≤–∏–µ —Å –æ—Ç–¥–µ–ª—å–Ω—ã–º –ø–∞–Ω–∫–æ–º
    console.log(punk)
})

let numbersAboveTen = numbers.filter(function (number) {
    return number >= 10
})

let result = testnets.find(function (testnet) {
    return testnet === "Rinkeby"
})

numbers.includes(5) // false

const doubled = numbers.map(function (number) {
    return number * 2
})


const races = ["Zerg", "Protoss", "Terran"]
races.join("_") // "Zerg_Protoss_Terran"


// –î–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏—è –º–∞—Å—Å–∏–≤–æ–≤
const block = [13335416, 355]
const [blockHeight, totalTxs] = block

// –°–∫–ª–µ–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∞—Å—Å–∏–≤–æ–≤ –≤ –æ–¥–∏–Ω (–∫–æ–Ω–∫–∞—Ç–µ–Ω–∏—Ä–æ–≤–∞—Ç—å –∏—Ö) –º–æ–∂–Ω–æ —Å –ø–æ–º–æ—â—å—é –º–Ω–æ–≥–æ—Ç–æ—á–∏—è ..., –µ—â–µ –Ω–∞–∑—ã–≤–∞–µ–º–æ–≥–æ —Å–ø—Ä–µ–¥–æ–ºü¶ñ:
const weapon = ["Wand of Vitriol"]
const chest = ["Dragonskin Armor"]
const gear = [...weapon, ...chest]




// –û–±—ä–µ–∫—Çü¶ñ ‚Äî —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö, –ø–æ–∑–≤–æ–ª—è—é—â–∏–π –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤ –æ–¥–Ω—É –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é, —Å–æ—Å—Ç–æ—è—â—É—é –∏–∑ –ø–∞—Ä –∫–ª—é—á–µ–π –∏ –∑–Ω–∞—á–µ–Ω–∏–π.
// —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤ Rust
const block = {
    height: 13272801,
    transactions: 452,
    minedBy: "Spark Pool",
    reward: 2.4811,
    stateRoot: "0xaa8f4"
}

//   –°—Ç—Ä–µ–ª–æ—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (–ª—è–º–±–¥–∞)
const sum = (a, b) => {
    return a + b
}

// –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ {} —Å–∫—Ä—ã—Ç—ã–π return –≤–º–µ—Å—Ç–æ —è–≤–Ω–æ–≥–æ return 
const sum = (a, b) => a + b

// –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞




// –†–∞–±–æ—Ç–∞ —Å–æ —Å—Ç—Ä–æ–∫–∞–º–∏
name.trim()

const sentence = "Non-fungible token"
sentence.startsWith("Non") // true
sentence.endsWith("en") // true

sentence.includes("fun") // true

https://codesandbox.io/s/strings-methods-practice-66-forked-5sgv6w

let rollups = "Arbitrum,Optimism,Starkware"
rollups.split(",") // ["Arbitrum", "Optimism", "Starkware"]

const kampai = "–ó–∞ —Ä–æ—Å—Ç–æ–≤—Å–∫—É—é –±—Ä–∞—Ç–≤—É!"
kampai.replace(" ", "_") // "–ó–∞_—Ä–æ—Å—Ç–æ–≤—Å–∫—É—é –±—Ä–∞—Ç–≤—É!" –∑–∞–º–µ–Ω–µ–Ω —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π –∏–∑ –¥–≤—É—Ö –ø—Ä–æ–±–µ–ª–æ–≤

kampai.replaceAll(" ", "_") // "–ó–∞_—Ä–æ—Å—Ç–æ–≤—Å–∫—É—é_–±—Ä–∞—Ç–≤—É!"

// –°–ª–∞–≥–æ–º (slug) –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–µ—Å—É—Ä—Å–∞


// –ú–µ—Ç–æ–¥ .every() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç true, –µ—Å–ª–∏ –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —É—Å–ª–æ–≤–∏—é –≤ –∫–æ–ª–±—ç–∫–µ
// –ú–µ—Ç–æ–¥ .some() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç true, –µ—Å–ª–∏ —Ö–æ—Ç—å –æ–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å—Å–∏–≤–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —É—Å–ª–æ–≤–∏—é –≤ –∫–æ–ª–±—ç–∫–µ

// –ß—Ç–æ–±—ã –æ—á–∏—Å—Ç–∏—Ç—å –º–∞—Å—Å–∏–≤ –æ—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –Ω—É–∂–Ω–æ –∑–∞–¥–∞—Ç—å –µ–º—É –Ω—É–ª–µ–≤—É—é –¥–ª–∏–Ω—É:
// scam.length = 0

// –û—Ç–¥–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –º–∞—Å—Å–∏–≤–∞ –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —Å –ø–æ–º–æ—â—å—é –º–µ—Ç–æ–¥–∞ .splice(n), —É–¥–∞–ª—è—é—â–∏–π –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã, –Ω–∞—á–∏–Ω–∞—è —Å n-–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞.
const firstItem = tokens.splice(0, 1)
// –º—É—Ç–∏—Ä—É–µ—Ç –º–∞—Å—Å–∏–≤ tokens

// –¶–µ–ª—å .reduce()ü¶ñ –ø–æ—Å—á–∏—Ç–∞—Ç—å –æ–¥–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–∞—Å—Å–∏–≤–∞. –î—Ä—É–≥–∏–º–∏ —Å–ª–æ–≤–∞–º–∏, –º–∞—Å—Å–∏–≤ —Ä–µ–¥—É—Ü–∏—Ä—É–µ—Ç—Å—è –¥–æ –æ–¥–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è. 

nums.reduce((acc, cur) => {
    return acc * cur
  }, 1)
//   –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä–∞ (–≤ –ø—Ä–∏–º–µ—Ä–µ —Å–æ —Å–ª–æ–∂–µ–Ω–∏–µ–º –æ–Ω –±—ã–ª 0, —Å —É–º–Ω–æ–∂–µ–Ω–∏–µ–º ‚Äî 1). 
// –ê–∫–∫—É–º—É–ª—è—Ç–æ—Ä —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–Ω–∞—á–µ–Ω–∏–µ, –ø–æ—Å—á–∏—Ç–∞–Ω–Ω–æ–µ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑, –∫–æ–≥–¥–∞ —Ä–µ–¥—é—Å–µ—Ä –≤—ã–∑—ã–≤–∞–ª—Å—è —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º —ç–ª–µ–º–µ–Ω—Ç–æ–º –º–∞—Å—Å–∏–≤–∞


